generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  hash     String

  Session Session[]

  Profile   Profile?
  Professor Professor?
  Student   Student?
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Profile {
  id          Int      @id @default(autoincrement())
  name        String
  isProfessor Boolean?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Professor {
  id     Int    @id @default(autoincrement())
  number String
  major  String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  kelas Kelas[]
}

model Student {
  id     Int    @id @default(autoincrement())
  number String
  major  String
  class  String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  kelas      Kelas[]
  Submission Submission[]
}

model Kelas {
  id   Int    @id @default(autoincrement())
  name String

  Professor   Professor @relation(fields: [professorId], references: [id])
  professorId Int

  student    Student[]
  Assignment Assignment[]
}

model Submission {
  id          Int      @id @default(autoincrement())
  attachments Json[]

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  Assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  deadline    DateTime
  attachments Json[]

  kelas      Kelas        @relation(fields: [kelasId], references: [id])
  kelasId    Int
  Submission Submission[]
}
